type Account implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """
  The API tokens that can be used to authenticate this account when making API calls or using our SDKs.
  """
  api_tokens(first: Int): AccountToApiTokensConnection!

  """
  The details of the balance of the nodes owned by this account on the Bitcoin Network.
  """
  blockchain_balance(
    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): BlockchainBalance

  """
  A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included).
  """
  conductivity(
    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): Int

  """
  The sum of the channel balances that are available to send on the nodes of this account.
  """
  local_balance(
    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): CurrencyAmount

  """The name of the company for this account."""
  name: String

  """The nodes that are managed by this account."""
  nodes(
    """
    The number of nodes to fetch. It is required if you are accessing the edges of the underlying connection.
    """
    first: Int = null

    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): AccountToNodesConnection!

  """
  The sum of the channel balances that are available to receive on the nodes of this account.
  """
  remote_balance(
    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): CurrencyAmount

  """
  An integer between 0 and 100 (included) that represents the percentage of uptime for the nodes owned by this account.
  """
  uptime_percentage(
    """
    Only use the uptime after that date. If not specified, it will set to the date this account was created.
    """
    after_date: DateTime = null

    """
    Only use the uptime before that date. If not specified, it will set to today.
    """
    before_date: DateTime = null

    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): Int

  """The settings for the API webhooks on this account."""
  webhooks_settings: WebhooksSettings
  channels(bitcoin_network: BitcoinNetwork!, lightning_node_id: ID = null, after_date: DateTime = null, before_date: DateTime = null, first: Int = null): AccountToChannelsConnection!
  transactions(first: Int = null, after: String = null, types: [TransactionType!] = null, after_date: DateTime = null, before_date: DateTime = null, bitcoin_network: BitcoinNetwork = null, lightning_node_id: ID = null, statuses: [TransactionStatus!] = null, exclude_failures: TransactionFailures = null): AccountToTransactionsConnection!
}

type AccountToApiTokenEdge {
  entity: ApiToken!
}

type AccountToApiTokensConnection {
  page_info: PageInfo!
  count: Int!
  edges: [AccountToApiTokenEdge!]!
}

type AccountToChannelEdge {
  entity: Channel!
}

type AccountToChannelsConnection {
  count(exclude_failed_closed: Boolean = null): Int!
  edges: [AccountToChannelEdge!]!
}

"""Represents the edge between an account and one of its nodes."""
type AccountToNodeEdge {
  entity: LightsparkNode!
}

"""A connection between an account and the nodes it manages."""
type AccountToNodesConnection {
  page_info: PageInfo!
  count: Int!

  """
  The main purpose for the selected set of nodes. It is automatically determined from the nodes that are selected in this connection and is used for optimization purposes, as well as to determine the variation of the UI that should be presented to the user.
  """
  purpose: LightsparkNodePurpose
  edges: [AccountToNodeEdge!]!
}

type AccountToTransactionEdge {
  entity: Transaction!
}

type AccountToTransactionsConnection {
  profit_loss: CurrencyAmount
  average_fee_earned: CurrencyAmount
  count: Int
  total_amount_transacted: CurrencyAmount
  edges: [AccountToTransactionEdge!]!
  page_info: PageInfo!
}

type ApiToken implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  client_id: String!
  name: String!
}

enum BitcoinNetwork {
  """The production version of the Bitcoin Blockchain."""
  MAINNET

  """A test version of the Bitcoin Blockchain, maintained by Lightspark."""
  REGTEST

  """
  A test version of the Bitcoin Blockchain, maintained by a centralized organization. Not in use at Lightspark.
  """
  SIGNET @deprecated(reason: "Use REGTEST.")

  """A test version of the Bitcoin Blockchain, publically available."""
  TESTNET
}

"""
This object provides a detailed breakdown of a `LightsparkNode`'s current balance on the Bitcoin Network.
"""
type BlockchainBalance {
  """The total wallet balance, including unconfirmed UTXOs."""
  total_balance: CurrencyAmount

  """The balance of confirmed UTXOs in the wallet."""
  confirmed_balance: CurrencyAmount

  """The balance of unconfirmed UTXOs in the wallet."""
  unconfirmed_balance: CurrencyAmount

  """The balance that's locked by an on-chain transaction."""
  locked_balance: CurrencyAmount

  """Funds required to be held in reserve for channel bumping."""
  required_reserve: CurrencyAmount

  """Funds available for creating channels or withdrawing."""
  available_balance: CurrencyAmount
}

"""
An object that represents a payment channel between two nodes in the Lightning Network.
"""
type Channel implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The output of the funding transaction. The format is <tx-id>:<index>."""
  channel_point: String @deprecated(reason: "Not needed when pass-through.")

  """The transaction that funded the channel upon channel opening."""
  funding_transaction: ChannelOpeningTransaction

  """
  The total amount of funds in this channel, including the channel balance on the local node, the channel balance on the remote node and the on-chain fees to close the channel.
  """
  capacity: CurrencyAmount

  """The channel balance on the local node."""
  local_balance: CurrencyAmount

  """
  The channel balance on the local node that is currently allocated to in-progress payments.
  """
  local_unsettled_balance: CurrencyAmount

  """The channel balance on the remote node."""
  remote_balance: CurrencyAmount

  """
  The channel balance on the remote node that is currently allocated to in-progress payments.
  """
  remote_unsettled_balance: CurrencyAmount

  """
  The channel balance that is currently allocated to in-progress payments.
  """
  unsettled_balance: CurrencyAmount

  """
  The total balance in this channel, including the channel balance on both local and remote nodes.
  """
  total_balance: CurrencyAmount

  """
  An integer between 0 and 100 (included) that represents the percentage of uptime for this channel.
  """
  uptime_percentage(after_date: DateTime = null, before_date: DateTime = null): Int

  """
  A connection to all transactions that have occurred on the channel including outgoing payments, incoming payments, routing transactions and on-chain transactions.
  """
  transactions(types: [TransactionType!] = null, after_date: DateTime = null, before_date: DateTime = null): ChannelToTransactionsConnection!

  """The current status of this channel."""
  status: ChannelStatus

  """
  The estimated time to wait for the channel's hash timelock contract to expire when force closing the channel. It is in unit of minutes.
  """
  estimated_force_closure_wait_minutes: Int

  """The fees charged for routing payments through this channel."""
  fees: ChannelFees

  """If known, the remote node of the channel."""
  remote_node: Node

  """The local Lightspark node of the channel."""
  local_node: LightsparkNode!

  """
  The unique identifier of the channel on Lightning Network, which is the location in the chain that the channel was confirmed. The format is <block-height>:<tx-index>:<tx-output>.
  """
  short_channel_id: String
}

"""
The transaction on Bitcoin blockchain to close a channel on Lightning Network where the balances are allocated back to local and remote nodes.
"""
type ChannelClosingTransaction implements OnChainTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime
  amount: CurrencyAmount!
  transaction_hash: String

  """
  The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain.
  """
  fees: CurrencyAmount

  """
  The hash of the block that included this transaction. This will be null for unconfirmed transactions.
  """
  block_hash: String

  """
  The height of the block that included this transaction. This will be zero for unconfirmed transactions.
  """
  block_height: Int!

  """The Bitcoin blockchain addresses this transaction was sent to."""
  destination_addresses: [String!]!

  """
  The number of blockchain confirmations for this transaction in real time.
  """
  num_confirmations: Int

  """If known, the channel this transaction is to close."""
  channel: Channel
}

type ChannelFees {
  base_fee: CurrencyAmount
  fee_rate_per_mil: Int
}

"""
The transaction on Bitcoin blockchain to open a channel on Lightning Network funded by the local Lightspark node.
"""
type ChannelOpeningTransaction implements OnChainTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime
  amount: CurrencyAmount!
  transaction_hash: String

  """
  The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain.
  """
  fees: CurrencyAmount

  """
  The hash of the block that included this transaction. This will be null for unconfirmed transactions.
  """
  block_hash: String

  """
  The height of the block that included this transaction. This will be zero for unconfirmed transactions.
  """
  block_height: Int!

  """The Bitcoin blockchain addresses this transaction was sent to."""
  destination_addresses: [String!]!

  """
  The number of blockchain confirmations for this transaction in real time.
  """
  num_confirmations: Int

  """If known, the channel this transaction is to open."""
  channel: Channel
}

enum ChannelStatus {
  """The channel is online and ready to send and receive funds."""
  OK

  """
  The channel has been created, but the Bitcoin transaction that initiates it still needs to be confirmed on the Bitcoin blockchain.
  """
  PENDING

  """The channel is not available, likely because the peer is not online."""
  OFFLINE

  """
  The channel is behaving properly, but its remote balance is much higher than its local balance so it is not balanced properly for sending funds out.
  """
  UNBALANCED_FOR_SEND

  """
  The channel is behaving properly, but its remote balance is much lower than its local balance so it is not balanced properly for receiving funds.
  """
  UNBALANCED_FOR_RECEIVE

  """
  The channel has been closed. Information about the channel is still available for historical purposes but the channel cannot be used anymore.
  """
  CLOSED

  """
  Something unexpected happened and we cannot determine the status of this channel. Please try again later or contact the support.
  """
  ERROR
}

type ChannelToTransactionsConnection {
  count: Int!
  average_fee: CurrencyAmount
  total_amount_transacted: CurrencyAmount
  total_fees: CurrencyAmount
}

input CreateInvoiceInput {
  node_id: ID!
  amount: CurrencyAmountInput!
  memo: String
}

type CreateInvoiceOutput {
  invoice: Invoice!
}

input CreateNodeWalletAddressInput {
  node_id: ID!
}

type CreateNodeWalletAddressOutput {
  node: LightsparkNode!
  wallet_address: String!
}

type CurrencyAmount {
  value: Long!
  unit: CurrencyUnit!
}

input CurrencyAmountInput {
  value: Long!
  unit: CurrencyUnit!
}

enum CurrencyUnit {
  """
  Bitcoin is the cryptocurrency native to the Bitcoin network. It is used as the native medium for value transfer for the Lightning Network.
  """
  BITCOIN

  """
  0.00000001 (10e-8) Bitcoin or one hundred millionth of a Bitcoin. This is the unit most commonly used in Lightning transactions.
  """
  SATOSHI

  """
  0.001 Satoshi, or 10e-11 Bitcoin. We recommend using the Satoshi unit instead when possible.
  """
  MILLISATOSHI

  """
  0.000000001 (10e-9) Bitcoin or a billionth of a Bitcoin. We recommend using the Satoshi unit instead when possible.
  """
  NANOBITCOIN

  """
  0.000001 (10e-6) Bitcoin or a millionth of a Bitcoin. We recommend using the Satoshi unit instead when possible.
  """
  MICROBITCOIN

  """
  0.001 (10e-3) Bitcoin or a thousandth of a Bitcoin. We recommend using the Satoshi unit instead when possible.
  """
  MILLIBITCOIN
}

"""Date with time (isoformat)"""
scalar DateTime

"""
The transaction on Bitcoin blockchain to fund the Lightspark node's wallet.
"""
type Deposit implements OnChainTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime
  amount: CurrencyAmount!
  transaction_hash: String

  """
  The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain.
  """
  fees: CurrencyAmount

  """
  The hash of the block that included this transaction. This will be null for unconfirmed transactions.
  """
  block_hash: String

  """
  The height of the block that included this transaction. This will be zero for unconfirmed transactions.
  """
  block_height: Int!

  """The Bitcoin blockchain addresses this transaction was sent to."""
  destination_addresses: [String!]!

  """
  The number of blockchain confirmations for this transaction in real time.
  """
  num_confirmations: Int

  """The recipient Lightspark node this deposit was sent to."""
  destination: LightsparkNode!
}

"""
This interface is used by all the entities in the Lightspark systems. It defines a few core fields that are available everywhere. Any object that implements this interface can be queried using the `entity` query and its ID.
"""
interface Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
}

type FeeEstimate {
  fee_fast: CurrencyAmount!
  fee_min: CurrencyAmount!
}

input FundNodeInput {
  node_id: ID!
  amount: CurrencyAmountInput = null
}

type FundNodeOutput {
  amount: CurrencyAmount!
}

"""
This is a node on the Lightning Network, managed by a third party. The information about this node is public data that has been obtained by observing the Lightning Network.
"""
type GraphNode implements Node & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """
  A name that identifies the node. It has no importance in terms of operating the node, it is just a way to identify and search for commercial services or popular nodes. This alias can be changed at any time by the node operator.
  """
  alias: String

  """The Bitcoin Network this node is deployed in."""
  bitcoin_network: BitcoinNetwork!

  """
  A hexadecimal string that describes a color. For example "#000000" is black, "#FFFFFF" is white. It has no importance in terms of operating the node, it is just a way to visually differentiate nodes. That color can be changed at any time by the node operator.
  """
  color: String

  """
  A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included).
  """
  conductivity: Int

  """
  The name of this node in the network. It will be the most human-readable option possible, depending on the data available for this node.
  """
  display_name: String!

  """
  The public key of this node. It acts as a unique identifier of this node in the Lightning Network.
  """
  public_key: String

  """
  The addresses that this node has announced for itself on the Lightning Network.
  """
  addresses(first: Int, types: [NodeAddressType!] = null): NodeToAddressesConnection!
}

"""
One hop signifies a payment moving one node ahead on a payment route; a list of sequential hops defines the path from sender node to recipient node for a payment attempt.
"""
type Hop implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The destination node of the hop."""
  destination: Node
}

"""A transaction that was sent to this node on the Lightning Network."""
type IncomingPayment implements LightningTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime
  amount: CurrencyAmount!
  transaction_hash: String

  """If known, the Lightspark node this payment originated from."""
  origin: LightsparkNode

  """The recipient Lightspark node this payment was sent to."""
  destination: LightsparkNode!

  """The attempts that have been made for this payment."""
  attempts(first: Int = null, statuses: [IncomingPaymentAttemptStatus!] = null): IncomingPaymentToAttemptsConnection!

  """
  The optional payment request for this incoming payment, which will be null if the payment is sent through keysend.
  """
  payment_request: PaymentRequest
}

"""
An attempt for a payment over a route from sender node to recipient node.
"""
type IncomingPaymentAttempt implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The status of the incoming payment attempt."""
  status: IncomingPaymentAttemptStatus!

  """The time the incoming payment attempt failed or succeeded."""
  resolved_at: DateTime

  """The total amount of that was attempted to send."""
  amount: CurrencyAmount!
  channel: Channel!
}

"""
Enum that enumerates all the possible status of an incoming payment attempt.
"""
enum IncomingPaymentAttemptStatus {
  ACCEPTED
  SETTLED
  CANCELED
  UNKNOWN
}

"""
This is the edge containing one attempt. It is used in IncomingPaymentToAttemptsConnection which contains a list of such edges for a given incoming payment.
"""
type IncomingPaymentToAttemptEdge {
  entity: IncomingPaymentAttempt!
}

"""The connection from incoming payment to all attempts."""
type IncomingPaymentToAttemptsConnection {
  """The total number of attempts for a given incoming payment."""
  count: Int!

  """
  The edges to a list of attempts made for the given incoming payment in descending order of their attempt time.
  """
  edges: [IncomingPaymentToAttemptEdge!]!
}

"""
This object represents a BOLT #11 invoice (https://github.com/lightning/bolts/blob/master/11-payment-encoding.md) initiated by a Lightspark Node.
"""
type Invoice implements PaymentRequest & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The details of the invoice."""
  data: InvoiceData!
}

"""
This object represents the BOLT #11 invoice protocol for Lightning Payments. See https://github.com/lightning/bolts/blob/master/11-payment-encoding.md.
"""
type InvoiceData implements PaymentRequestData {
  encoded_payment_request: String!
  bitcoin_network: BitcoinNetwork!
  payment_hash: String!
  amount: CurrencyAmount!
  created_at: DateTime!
  expires_at: DateTime!
  destination: Node!
  memo: String
}

type Key {
  type: KeyType!
  public_key: String!
}

enum KeyType {
  RSA_OAEP
}

interface LightningTransaction implements Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime
  amount: CurrencyAmount!
  transaction_hash: String
}

"""
This is a node that is managed by Lightspark and is managed within the current connected account. It contains many details about the node configuration, state, and metadata.
"""
type LightsparkNode implements Node & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """
  A name that identifies the node. It has no importance in terms of operating the node, it is just a way to identify and search for commercial services or popular nodes. This alias can be changed at any time by the node operator.
  """
  alias: String

  """The Bitcoin Network this node is deployed in."""
  bitcoin_network: BitcoinNetwork!

  """
  A hexadecimal string that describes a color. For example "#000000" is black, "#FFFFFF" is white. It has no importance in terms of operating the node, it is just a way to visually differentiate nodes. That color can be changed at any time by the node operator.
  """
  color: String

  """
  A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included).
  """
  conductivity: Int

  """
  The name of this node in the network. It will be the most human-readable option possible, depending on the data available for this node.
  """
  display_name: String!

  """
  The public key of this node. It acts as a unique identifier of this node in the Lightning Network.
  """
  public_key: String

  """
  The addresses that this node has announced for itself on the Lightning Network.
  """
  addresses(first: Int, types: [NodeAddressType!] = null): NodeToAddressesConnection!

  """The details of the balance of this node on the Bitcoin Network."""
  blockchain_balance: BlockchainBalance
  channel_from_point(channel_point: String!): Channel @deprecated(reason: "Not needed when pass-through.")

  """The channels that are connected to this node."""
  channels(first: Int, statuses: [ChannelStatus!] = null): LightsparkNodeToChannelsConnection!

  """
  The admin macaroon is the token that is used to authenticate with the LND instance of the node. Lightspark stores an encrypted version of it that only the node operator can decrypt, using their node password.
  """
  encrypted_admin_macaroon: Secret

  """
  The private key client is using to sign a GraphQL request which will be verified at LND.
  """
  encrypted_signing_private_key: Secret

  """
  The public key that should be used to encrypt sensitive communication with the node.
  """
  encryption_public_key: Key

  """
  The hostname that can be used to communicate with the node (LND instance) directly using its gRPC API.
  """
  grpc_hostname: String

  """
  The sum of the channel balances that are available to send on this node.
  """
  local_balance: CurrencyAmount

  """The name of this node, chosen by the node operator."""
  name: String! @deprecated(reason: "Use display_name instead")
  purpose: LightsparkNodePurpose

  """
  The sum of the channel balances that are available to receive on this node.
  """
  remote_balance: CurrencyAmount

  """
  The URL that can be used to communicate with the node (LND instance) directly using its REST API.
  """
  rest_url: String
  status: LightsparkNodeStatus

  """
  Indicates whether or not the node should be upgraded to the newest version.
  """
  upgrade_available: Boolean!
}

enum LightsparkNodePurpose {
  SEND
  RECEIVE
  ROUTING
}

enum LightsparkNodeStatus {
  CREATED
  DEPLOYED
  STARTED
  SYNCING
  READY
  STOPPED
  TERMINATED
  WALLET_LOCKED
  FAILED_TO_DEPLOY
}

type LightsparkNodeToChannelEdge {
  entity: Channel!
}

type LightsparkNodeToChannelsConnection {
  page_info: PageInfo!
  count: Int!
  edges: [LightsparkNodeToChannelEdge!]!
}

"""The `Long` scalar type represents a 64 bit integer."""
scalar Long

type Mutation {
  """
  Generates a Lightning Invoice (follows the Bolt 11 specification) to request a payment from another Lightning Node.
  """
  create_invoice(input: CreateInvoiceInput!): CreateInvoiceOutput!

  """
  Creates a Bitcoin address for the wallet associated with your Lightning Node. You can use this address to send funds to your node. It is a best practice to generate a new wallet address every time you need to send money. You can generate as many wallet addresses as you want.
  """
  create_node_wallet_address(input: CreateNodeWalletAddressInput!): CreateNodeWalletAddressOutput!

  """
  Adds funds to a Lightspark node on the REGTEST network. If the amount is not specified, 10,000,000 SATOSHI will be added.
  This API only functions for nodes created on the REGTEST network and will return an error when called for any non-REGTEST node.
  """
  fund_node(input: FundNodeInput!): FundNodeOutput!

  """
  Sends a payment to a node on the Lightning Network, based on the invoice (as defined by the BOLT11 specification) that you provide.
  """
  pay_invoice(input: PayInvoiceInput!): PayInvoiceOutput!

  """
  Withdraws money from one of your nodes and sends it to a Bitcoin address of your choice.
  """
  withdraw_funds(input: WithdrawFundsInput!): WithdrawFundsOutput!
}

"""
This interface represents a lightning node that can be connected to the Lightning Network to send and receive transactions.
"""
interface Node implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """
  A name that identifies the node. It has no importance in terms of operating the node, it is just a way to identify and search for commercial services or popular nodes. This alias can be changed at any time by the node operator.
  """
  alias: String

  """The Bitcoin Network this node is deployed in."""
  bitcoin_network: BitcoinNetwork!

  """
  A hexadecimal string that describes a color. For example "#000000" is black, "#FFFFFF" is white. It has no importance in terms of operating the node, it is just a way to visually differentiate nodes. That color can be changed at any time by the node operator.
  """
  color: String

  """
  A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included).
  """
  conductivity: Int

  """
  The name of this node in the network. It will be the most human-readable option possible, depending on the data available for this node.
  """
  display_name: String!

  """
  The public key of this node. It acts as a unique identifier of this node in the Lightning Network.
  """
  public_key: String

  """
  The addresses that this node has announced for itself on the Lightning Network.
  """
  addresses(first: Int, types: [NodeAddressType!] = null): NodeToAddressesConnection!
}

"""
An object that represents the address of a node on the Lightning Network.
"""
type NodeAddress {
  """The string representation of the address."""
  address: String!

  """The type of this address."""
  type: NodeAddressType!
}

"""
An enum that enumerates all possible types of addresses of a node on the Lightning Network.
"""
enum NodeAddressType {
  IPV4
  IPV6
  TOR
}

"""
Represents the edge between a node and one of its addresses it has announced for itself on Lightning Network.
"""
type NodeToAddressEdge {
  """"""
  entity: NodeAddress!
}

"""
A connection between a node and the addresses it has announced for itself on Lightning Network.
"""
type NodeToAddressesConnection {
  """
  The total number of addresses the node has announced for itself on Lightning Network.
  """
  count: Int!
  edges: [NodeToAddressEdge!]!
}

"""Transaction happened on Bitcoin blockchain."""
interface OnChainTransaction implements Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime
  amount: CurrencyAmount!
  transaction_hash: String

  """
  The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain.
  """
  fees: CurrencyAmount

  """
  The hash of the block that included this transaction. This will be null for unconfirmed transactions.
  """
  block_hash: String

  """
  The height of the block that included this transaction. This will be zero for unconfirmed transactions.
  """
  block_height: Int!

  """The Bitcoin blockchain addresses this transaction was sent to."""
  destination_addresses: [String!]!

  """
  The number of blockchain confirmations for this transaction in real time.
  """
  num_confirmations: Int
}

"""A transaction was sent from this node on the Lightning Network."""
type OutgoingPayment implements LightningTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime
  amount: CurrencyAmount!
  transaction_hash: String

  """The Lightspark node this payment originated from."""
  origin: LightsparkNode!

  """If known, the final recipient node this payment was sent to."""
  destination: Node

  """The fees paid by the sender node to send the payment."""
  fees: CurrencyAmount
  payment_request_data: PaymentRequestData

  """The attempts that have been made for this payment for possible routes."""
  attempts(first: Int = null): OutgoingPaymentToAttemptsConnection!

  """If applicable, the reason why the payment failed."""
  failure_reason: PaymentFailureReason

  """
  If applicable, user-facing error message describing why the payment failed.
  """
  failure_message: RichText
}

"""
An attempt for a payment over a route from sender node to recipient node.
"""
type OutgoingPaymentAttempt implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the attempt was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The status of an outgoing payment attempt."""
  status: OutgoingPaymentAttemptStatus!

  """The time the outgoing payment attempt failed or succeeded."""
  resolved_at: DateTime

  """
  The total amount of funds required to complete a payment over this route. This value includes the cumulative fees for each hop. As a result, the attempt extended to the first-hop in the route will need to have at least this much value, otherwise the route will fail at an intermediate node due to an insufficient amount.
  """
  amount: CurrencyAmount

  """
  The sum of the fees paid at each hop within the route of this attempt. In the case of a one-hop payment, this value will be zero as we don't need to pay a fee to ourselves.
  """
  fees: CurrencyAmount

  """
  A list of hops that represent the route from the sender node to the recipient node.
  """
  hops(first: Int = null): OutgoingPaymentAttemptToHopsConnection!
  outgoing_payment: OutgoingPayment!
}

"""
Enum that enumerates all the possible status of an outgoing payment attempt.
"""
enum OutgoingPaymentAttemptStatus {
  IN_FLIGHT
  SUCCEEDED
  FAILED
}

"""
This is the edge containing one hop. It is used in PaymentAttemptToHopsConnection which contains a list of such edges for a given outgoing payment attempt.
"""
type OutgoingPaymentAttemptToHopEdge {
  entity: Hop!
}

"""
The connection from an outgoing payment attempt to the list of sequential hops that define the path from sender node to recipient node.
"""
type OutgoingPaymentAttemptToHopsConnection {
  """The total number of hops for a given outgoing payment attempt."""
  count: Int

  """
  The edges to a list of hops ordered by their indices in the path from sender node to recipient node given an outgoing payment attempt.
  """
  edges: [OutgoingPaymentAttemptToHopEdge!]!
}

"""
This is the edge containing one attempt. It is used in OutgoingPaymentToAttemptsConnection which contains a list of such edges for a given outgoing payment.
"""
type OutgoingPaymentToAttemptEdge {
  entity: OutgoingPaymentAttempt!
}

"""The connection from outgoing payment to all attempts."""
type OutgoingPaymentToAttemptsConnection {
  """The total number of attempts for a given outgoing payment."""
  count: Int!

  """
  The edges to a list of attempts made for the given outgoing payment in descending order of their attempt time.
  """
  edges: [OutgoingPaymentToAttemptEdge!]!
}

type PageInfo {
  has_next_page: Boolean
  has_previous_page: Boolean
  start_cursor: String
  end_cursor: String
}

input PayInvoiceInput {
  """The node from where you want to send the payment."""
  node_id: ID!

  """The invoice you want to pay (as defined by the BOLT11 standard)."""
  encoded_invoice: String!

  """The timeout in seconds that we will try to make the payment."""
  timeout_secs: Int!

  """
  The amount you will pay for this invoice. It should ONLY be set when the invoice amount is zero.
  """
  amount: CurrencyAmountInput

  """
  The maximum amount of fees that you want to pay for this payment to be sent.
  """
  maximum_fees: CurrencyAmountInput
}

type PayInvoiceOutput {
  """The payment that has been sent."""
  payment: OutgoingPayment!
}

enum PaymentFailureReason {
  NONE
  TIMEOUT
  NO_ROUTE
  ERROR
  INCORRECT_PAYMENT_DETAILS
  INSUFFICIENT_BALANCE
}

interface PaymentRequest implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The details of the payment request."""
  data: PaymentRequestData!
}

"""
The interface of a payment request on the Lightning Network (a.k.a. Lightning Invoice).
"""
interface PaymentRequestData {
  encoded_payment_request: String!
  bitcoin_network: BitcoinNetwork!
}

type Query {
  """Returns the current connected account."""
  current_account: Account

  """
  Decodes the content of an encoded payment request into structured data that can be used by the client.
  """
  decoded_payment_request(encoded_payment_request: String!): PaymentRequestData!

  """Returns any `Entity`, identified by its unique ID."""
  entity(id: ID!): Entity

  """
  Returns an estimate of the fees of a transaction on the Bitcoin Network.
  """
  fee_estimate(network: BitcoinNetwork!): FeeEstimate!
}

type RichText {
  text: String!
}

"""
A transaction that was forwarded through this node on the Lightning Network.
"""
type RoutingTransaction implements LightningTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime
  amount: CurrencyAmount!
  transaction_hash: String

  """If known, the channel this transaction was received from."""
  incoming_channel: Channel

  """If known, the channel this transaction was forwarded to."""
  outgoing_channel: Channel

  """
  The fees collected by the node when routing this transaction. We subtract the outgoing amount to the incoming amount to determine how much fees were collected.
  """
  fees: CurrencyAmount

  """
  If applicable, user-facing error message describing why the routing failed.
  """
  failure_message: RichText

  """If applicable, the reason why the routing failed."""
  failure_reason: RoutingTransactionFailureReason
}

enum RoutingTransactionFailureReason {
  INCOMING_LINK_FAILURE
  OUTGOING_LINK_FAILURE
  FORWARDING_FAILURE
}

type Secret {
  encrypted_value: String!
  cipher: String!
}

interface Transaction implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime
  amount: CurrencyAmount!
  transaction_hash: String
}

input TransactionFailures {
  payment_failures: [PaymentFailureReason!] = null
  routing_transaction_failures: [RoutingTransactionFailureReason!] = null
}

enum TransactionStatus {
  NOT_STARTED
  SUCCESS
  FAILED
  PENDING
  EXPIRED
  CANCELLED
}

enum TransactionType {
  PAYMENT
  PAYMENT_REQUEST
  ROUTE
  L1_WITHDRAW
  L1_DEPOSIT
  CHANNEL_OPEN
  CHANNEL_CLOSE
}

enum WebhookEventType {
  PAYMENT_FINISHED
  NODE_STATUS
}

type WebhooksSettings {
  url: String!
  secret: String!
  events: [WebhookEventType!]!
}

input WithdrawFundsInput {
  """The node from where you want to withdraw money."""
  node_id: ID!

  """The bitcoin address where the withdrawal should be sent."""
  bitcoin_address: String!

  """The amount you want to withdraw from your node."""
  amount: CurrencyAmountInput!
}

type WithdrawFundsOutput {
  """
  The bitcoin transaction that represents the withdrawal that has been sent.
  """
  transaction: Withdrawal!
}

"""
The transaction on the Bitcoin blockchain to withdraw funds from the Lightspark node to a Bitcoin wallet.
"""
type Withdrawal implements OnChainTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime
  amount: CurrencyAmount!
  transaction_hash: String

  """
  The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain.
  """
  fees: CurrencyAmount

  """
  The hash of the block that included this transaction. This will be null for unconfirmed transactions.
  """
  block_hash: String

  """
  The height of the block that included this transaction. This will be zero for unconfirmed transactions.
  """
  block_height: Int!

  """The Bitcoin blockchain addresses this transaction was sent to."""
  destination_addresses: [String!]!

  """
  The number of blockchain confirmations for this transaction in real time.
  """
  num_confirmations: Int

  """The Lightspark node this withdrawal originated from."""
  origin: LightsparkNode!
}
